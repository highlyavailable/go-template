# GitLab CI/CD Pipeline for Go Template
# Documentation: https://docs.gitlab.com/ee/ci/

# Global Configuration
image: golang:1.23-alpine

variables:
  # Go Configuration
  GO_VERSION: "1.23"
  CGO_ENABLED: "0"
  GOOS: "linux"
  GOARCH: "amd64"
  
  # Project Configuration
  PROJECT_NAME: "goapp"
  BINARY_NAME: "goapp"
  
  # Docker Configuration
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  
  # Cache Configuration
  GOPATH: $CI_PROJECT_DIR/.go
  GOCACHE: $CI_PROJECT_DIR/.cache/go-build
  GOLANGCI_LINT_CACHE: $CI_PROJECT_DIR/.cache/golangci-lint
  
  # Coverage Configuration
  COVERAGE_THRESHOLD: "80"

# Global Cache Configuration
cache:
  key: "${CI_COMMIT_REF_SLUG}"
  paths:
    - .go/pkg/mod/
    - .cache/go-build/
    - .cache/golangci-lint/
    - goapp/vendor/

# Stage Definitions
stages:
  - validate
  - test
  - build
  - security
  - package
  - cleanup

# ================================================================
# Before Script - Common Setup
# ================================================================
.setup_template: &setup_template
  before_script:
    - apk add --no-cache git make bash curl jq
    - cd goapp
    - go version
    - go mod download
    - go mod verify

# ================================================================
# Validation Stage
# ================================================================
validate:format:
  stage: validate
  <<: *setup_template
  script:
    - |
      if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
        echo "Code is not formatted. Files that need formatting:"
        gofmt -s -l .
        exit 1
      fi
      echo "✅ Code formatting is correct"
  only:
    - merge_requests
    - main
    - develop

validate:imports:
  stage: validate
  <<: *setup_template
  script:
    - go install golang.org/x/tools/cmd/goimports@latest
    - |
      if [ "$(goimports -l . | wc -l)" -gt 0 ]; then
        echo "Imports are not organized. Files that need fixing:"
        goimports -l .
        exit 1
      fi
      echo "✅ Import organization is correct"
  only:
    - merge_requests
    - main
    - develop

validate:modules:
  stage: validate
  <<: *setup_template
  script:
    - go mod tidy
    - |
      if [ -n "$(git diff --name-only)" ]; then
        echo "go.mod or go.sum is not up to date. Please run 'go mod tidy'"
        git diff
        exit 1
      fi
      echo "✅ Go modules are up to date"
  only:
    - merge_requests
    - main
    - develop

# ================================================================
# Testing Stage
# ================================================================
test:unit:
  stage: test
  <<: *setup_template
  script:
    - echo "Running unit tests..."
    - go test -v -race -timeout 30m ./...
    - echo "✅ Unit tests passed"
  coverage: '/total:\s+\(statements\)\s+(\d+\.\d+)%/'
  only:
    - merge_requests
    - main
    - develop

test:coverage:
  stage: test
  <<: *setup_template
  script:
    - echo "Running tests with coverage..."
    - go test -coverprofile=coverage.out -covermode=atomic ./...
    - go tool cover -func=coverage.out | tail -1
    - |
      COVERAGE=$(go tool cover -func=coverage.out | grep "total:" | awk '{print $3}' | sed 's/%//')
      echo "Coverage: ${COVERAGE}%"
      echo "Threshold: ${COVERAGE_THRESHOLD}%"
      
      if [ $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l) -eq 1 ]; then
        echo "❌ Coverage ${COVERAGE}% is below threshold ${COVERAGE_THRESHOLD}%"
        exit 1
      fi
      echo "✅ Coverage ${COVERAGE}% meets threshold ${COVERAGE_THRESHOLD}%"
    - go tool cover -html=coverage.out -o coverage.html
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: goapp/coverage.xml
    paths:
      - goapp/coverage.out
      - goapp/coverage.html
    expire_in: 1 week
  coverage: '/total:\s+\(statements\)\s+(\d+\.\d+)%/'
  only:
    - merge_requests
    - main
    - develop


test:benchmark:
  stage: test
  <<: *setup_template
  script:
    - echo "Running benchmark tests..."
    - go test -bench=. -benchmem -run=^$ ./... > benchmark-results.txt
    - cat benchmark-results.txt
    - echo "✅ Benchmark tests completed"
  artifacts:
    paths:
      - goapp/benchmark-results.txt
    expire_in: 1 week
  only:
    - main
    - develop

# ================================================================
# Build Stage
# ================================================================
build:binary:
  stage: build
  <<: *setup_template
  script:
    - echo "Building application..."
    - mkdir -p build
    - |
      # Get version information
      if [ -n "$CI_COMMIT_TAG" ]; then
        VERSION="$CI_COMMIT_TAG"
      else
        VERSION="$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
      fi
      
      BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
      GIT_COMMIT="$CI_COMMIT_SHORT_SHA"
      GIT_BRANCH="$CI_COMMIT_REF_NAME"
      
      echo "Building version: $VERSION"
      
      # Install swagger generator
      go install github.com/swaggo/swag/cmd/swag@latest
      
      # Generate documentation
      swag init -g ./cmd/goapp/main.go --output docs
      
      # Build with version information
      go build \
        -ldflags="-X main.version=${VERSION} -X main.buildTime=${BUILD_TIME} -X main.gitCommit=${GIT_COMMIT} -X main.gitBranch=${GIT_BRANCH} -s -w" \
        -o "build/${BINARY_NAME}" \
        ./cmd/goapp
      
      echo "✅ Build completed successfully"
      ls -la build/
  artifacts:
    paths:
      - goapp/build/
      - goapp/docs/
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop
    - tags


# ================================================================
# Security Stage
# ================================================================
security:lint:
  stage: security
  <<: *setup_template
  script:
    - echo "Running golangci-lint..."
    - |
      # Install golangci-lint
      curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
      export PATH=$(go env GOPATH)/bin:$PATH
    - golangci-lint run --config ../.golangci.yml --timeout 5m
    - echo "✅ Linting completed"
  artifacts:
    reports:
      codequality: goapp/gl-code-quality-report.json
    when: always
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

security:gosec:
  stage: security
  <<: *setup_template
  script:
    - echo "Running gosec security scanner..."
    - go install github.com/securecodewarrior/gosec/v2/cmd/gosec@v2.18.2
    - gosec -fmt json -out gosec-report.json -stdout -quiet ./...
    - echo "✅ Security scan completed"
  artifacts:
    reports:
      sast: goapp/gosec-report.json
    when: always
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

security:nancy:
  stage: security
  <<: *setup_template
  script:
    - echo "Running Nancy dependency scanner..."
    - go install github.com/sonatypecommunity/nancy@latest
    - go list -json -deps ./... | nancy sleuth
    - echo "✅ Dependency scan completed"
  allow_failure: true
  only:
    - merge_requests
    - main
    - develop

security:trivy:
  stage: security
  image: aquasec/trivy:latest
  variables:
    GIT_STRATEGY: none
  script:
    - echo "Running Trivy filesystem scanner..."
    - trivy fs --exit-code 0 --format json --output trivy-report.json .
    - trivy fs --exit-code 1 --severity HIGH,CRITICAL .
    - echo "✅ Trivy scan completed"
  artifacts:
    reports:
      dependency_scanning: trivy-report.json
    when: always
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

# ================================================================
# Package Stage
# ================================================================
docker:build:
  stage: package
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_BUILDKIT: 1
  before_script:
    - docker info
  script:
    - echo "Building Docker image (local only)..."
    - |
      # Build image locally for testing
      docker build \
        --build-arg VERSION=${CI_COMMIT_REF_NAME:-main} \
        --build-arg BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
        --build-arg GIT_COMMIT=$CI_COMMIT_SHORT_SHA \
        -t goapp:${CI_COMMIT_SHORT_SHA} \
        .
      
      echo "✅ Docker image built locally"
  only:
    - merge_requests
    - main
    - develop

# ================================================================
# Cleanup Stage
# ================================================================
cleanup:artifacts:
  stage: cleanup
  image: alpine:latest
  script:
    - echo "Cleaning up old artifacts..."
    - echo "✅ Cleanup completed"
  when: always
  only:
    - main
    - develop

# ================================================================
# Scheduled Jobs
# ================================================================
security:scheduled:
  stage: security
  <<: *setup_template
  script:
    - echo "Running scheduled security scan..."
    - go install github.com/securecodewarrior/gosec/v2/cmd/gosec@v2.18.2
    - gosec ./...
    - echo "✅ Scheduled security scan completed"
  only:
    - schedules
  allow_failure: true

# ================================================================
# Manual Jobs
# ================================================================
performance:test:
  stage: test
  <<: *setup_template
  script:
    - echo "Running performance tests..."
    - go test -bench=. -benchmem -benchtime=10s ./...
    - echo "✅ Performance tests completed"
  artifacts:
    paths:
      - goapp/performance-results.txt
    expire_in: 1 week
  when: manual
  only:
    - main
    - develop