# golangci-lint configuration
# Documentation: https://golangci-lint.run/usage/configuration/

run:
  timeout: 5m
  issues-exit-code: 1
  tests: true
  skip-dirs:
    - vendor/
    - .git/
    - build/
    - coverage/
    - docs/
  skip-files:
    - ".*_generated.go$"
    - ".*\\.pb\\.go$"
  modules-download-mode: readonly
  allow-parallel-runners: true

output:
  format: colored-line-number
  print-issued-lines: true
  print-linter-name: true
  uniq-by-line: true
  sort-results: true

linters-settings:
  # Enable specific linter configurations
  errcheck:
    check-type-assertions: true
    check-blank: true
    exclude-functions:
      - io/ioutil.ReadFile
      - io.Copy(*bytes.Buffer)
      - io.Copy(os.Stdout)

  exhaustive:
    check-generated: false
    default-signifies-exhaustive: false

  funlen:
    lines: 100
    statements: 50

  gci:
    sections:
      - standard # Standard section: captures all standard packages.
      - default # Default section: contains all imports that could not be matched to another section type.
      - prefix(goapp) # Custom section: groups all imports with the specified Prefix.
    skip-generated: true
    custom-order: true

  goconst:
    min-len: 2
    min-occurrences: 3
    ignore-tests: false
    match-constant: true
    numbers: false
    min: 3
    max: 3
    ignore-calls: true

  gocritic:
    enabled-tags:
      - diagnostic
      - style
      - performance
      - experimental
      - opinionated
    disabled-checks:
      - whyNoLint
      - unnamedResult
      - hugeParam

  gocyclo:
    min-complexity: 15

  godot:
    scope: declarations
    exclude:
      - "^fixme:"
      - "^todo:"
    period: true
    capital: false

  gofmt:
    simplify: true

  goimports:
    local-prefixes: goapp

  gomnd:
    # don't include the "operation" and "assign"
    checks:
      - argument
      - case
      - condition
      - return
    ignored-numbers:
      - '0'
      - '1'
      - '2'
      - '3'
    ignored-functions:
      - strings.SplitN

  gomodguard:
    allowed:
      modules: []
      domains: []
    blocked:
      modules:
        - github.com/uudashr/go-module:
            recommendations:
              - golang.org/x/mod
            reason: "`mod` is the official go.mod parser library."

  govet:
    check-shadowing: true
    settings:
      printf:
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

  depguard:
    rules:
      main:
        deny:
          - pkg: "github.com/sirupsen/logrus"
            desc: not allowed
          - pkg: "github.com/pkg/errors"
            desc: Should be replaced by standard lib errors package

  lll:
    line-length: 120

  misspell:
    locale: US

  nakedret:
    max-func-lines: 30

  nolintlint:
    allow-leading-space: true # don't require machine-readable nolint directives (i.e. with no leading space)
    allow-unused: false # report any unused nolint directives
    require-explanation: false # don't require an explanation for nolint directives
    require-specific: false # don't require nolint directives to be specific about which linter is being skipped

  prealloc:
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default

  predeclared:
    ignore: ""
    q: false

  revive:
    min-confidence: 0
    rules:
      - name: atomic
      - name: line-length-limit
        severity: error
        arguments: [120]
      - name: unhandled-error
        arguments:
          - "fmt.Printf"
          - "fmt.Println"
          - "fmt.Print"

  staticcheck:
    checks: ["all"]

  stylecheck:
    checks: ["all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022"]
    dot-import-whitelist:
      - fmt

  tagliatelle:
    case:
      rules:
        json: camel
        yaml: camel
        xml: camel
        bson: camel
        avro: snake
        mapstructure: kebab

  testpackage:
    skip-regexp: (export|internal)_test\.go

  unparam:
    check-exported: false

  unused:
    check-exported: false

  whitespace:
    multi-if: false   # Enforces newlines (or comments) after every multi-line if statement
    multi-func: false # Enforces newlines (or comments) after every multi-line function signature

  wrapcheck:
    ignoreSigs:
      - .Errorf(
      - errors.New(
      - errors.Unwrap(
      - .Wrap(
      - .Wrapf(

  wsl:
    strict-append: true
    allow-assign-and-call: true
    allow-multiline-assign: true
    allow-cuddle-declarations: false
    allow-trailing-comment: false
    force-case-trailing-whitespace: 0
    force-err-cuddling: false
    allow-separated-leading-comment: false

linters:
  disable-all: true
  enable:
    # Enable by default
    - errcheck    # Errcheck is a program for checking for unchecked errors in go programs
    - gosimple    # Linter for Go source code that specializes in simplifying a code
    - govet       # Vet examines Go source code and reports suspicious constructs
    - ineffassign # Detects when assignments to existing variables are not used
    - staticcheck # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    - typecheck   # Like the front-end of a Go compiler, parses and type-checks Go code
    - unused      # Checks Go code for unused constants, variables, functions and types

    # Additional useful linters
    - asasalint      # Check for pass []any as any in variadic func(...any)
    - asciicheck     # Simple linter to check that your code does not contain non-ASCII identifiers
    - bidichk        # Checks for dangerous unicode character sequences
    - bodyclose      # checks whether HTTP response body is closed successfully
    - containedctx   # containedctx is a linter that detects struct contained context.Context field
    - contextcheck   # check the function whether use a non-inherited context
    - cyclop         # checks function and package cyclomatic complexity
    - dupl           # Tool for code clone detection
    - durationcheck  # check for two durations multiplied together
    - errname        # Checks that sentinel errors are prefixed with the `Err` and error types are suffixed with the `Error`.
    - errorlint      # errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - execinquery    # execinquery is a linter about query string checker in Query function which reads your Go src files and warning it finds
    - exhaustive     # check exhaustiveness of enum switch statements
    - exportloopref  # checks for pointers to enclosing loop variables
    - forbidigo      # Forbids identifiers
    - funlen         # Tool for detection of long functions
    - gci            # Gci control golang package import order and make it always deterministic.
    - gochecknoglobals # check that no global variables exist
    - gochecknoinits # Checks that no init functions are present in Go code
    - gocognit       # Computes and checks the cognitive complexity of functions
    - goconst        # Finds repeated strings that could be replaced by a constant
    - gocritic       # Provides diagnostics that check for bugs, performance and style issues.
    - gocyclo        # Computes and checks the cyclomatic complexity of functions
    - godot          # Check if comments end in a period
    - gofmt          # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
    - gofumpt        # Gofumpt checks whether code was gofumpt-ed.
    - goheader       # Checks is file header matches to pattern
    - goimports      # In addition to fixing imports, goimports also formats your code in the same style as gofmt.
    - gomnd          # An analyzer to detect magic numbers.
    - gomoddirectives # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod.
    - gomodguard     # Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations.
    - goprintffuncname # Checks that printf-like functions are named with `f` at the end
    - gosec          # Inspects source code for security problems
    - lll            # Reports long lines
    - loggercheck    # Checks key value pairs for common logger libraries (kitlog,klog,logr,zap).
    - makezero       # Finds slice declarations with non-zero initial length
    - misspell       # Finds commonly misspelled English words in comments
    - nakedret       # Finds naked returns in functions greater than a specified function length
    - nestif         # Reports deeply nested if statements
    - nilerr         # Finds the code that returns nil even if it checks that the error is not nil.
    - nilnil         # Checks that there is no simultaneous return of `nil` error and an invalid value.
    - noctx          # noctx finds sending http request without context.Context
    - nolintlint     # Reports ill-formed or insufficient nolint directives
    - nonamedreturns # Reports all named returns
    - nosprintfhostport # Checks for misuse of Sprintf to construct a host with port in a URL.
    - predeclared    # find code that shadows one of Go's predeclared identifiers
    - promlinter     # Check Prometheus metrics naming via promlint
    - reassign       # Checks that package variables are not reassigned
    - revive         # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint.
    - stylecheck     # Stylecheck is a replacement for golint
    - tagliatelle    # Checks the struct tags.
    - tenv           # tenv is analyzer that detects using os.Setenv instead of t.Setenv since Go1.17
    - testableexamples # linter checks if examples are testable (have an expected output)
    - testpackage    # linter that makes you use a separate _test package
    - tparallel      # tparallel detects inappropriate usage of t.Parallel() method in your Go test codes
    - unconvert      # Remove unnecessary type conversions
    - unparam        # Reports unused function parameters
    - usestdlibvars  # A linter that detect the possibility to use variables/constants from the Go standard library.
    - wastedassign   # wastedassign finds wasted assignment statements.
    - whitespace     # Tool for detection of leading and trailing whitespace

issues:
  # List of regexps of issue texts to exclude, empty list by default.
  exclude:
    - "Error return value of .((os\\.)?std(out|err)\\..*|.*Close|.*Flush|os\\.Remove(All)?|.*printf?|os\\.(Un)?Setenv). is not checked"
    - "exported (type|method|function) (.+) should have comment or be unexported"
    - "ST1000: at least one file in a package should have a package comment"

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - gomnd
        - gocritic
        - gocyclo
        - funlen
        - dupl
        - lll

    # Exclude known linters from partially hard-to-fix problems
    - path: ".*"
      linters:
        - goerr113
        - wrapcheck

    # Exclude some staticcheck messages
    - linters:
        - staticcheck
      text: "SA9003:"

    # Exclude lll issues for long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "

  # Set to 0 to disable limit.
  max-issues-per-linter: 50
  max-same-issues: 3

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  new: false

  # Fix found issues (if it's supported by the linter)
  fix: false

severity:
  default-severity: error
  case-sensitive: false
  rules:
    - linters:
        - dupl
      severity: info